/*--------------------------------------------------------------------------*/
/*----------------------------- File main.cpp ------------------------------*/
/*--------------------------------------------------------------------------*/
/** @file
 * The main file implementation of the  ReAl problem.
 *
 * \version 0.1
 *
 * \date 24 - 02 - 2022
 *
 * \author Amin Asadi \n
 *         Department of \n
 *         Industrial Engineering and Business Information System  \n
 *         University of Twente \n
 *
 * \author Ali Ghezelsoflu \n
 *         Department of  \n
 *         Industrial Engineering and Business Information System  \n
 *         University of Twente \n
 *
 *
 * Copyright &copy by Amin Asadi, Ali Ghezelsoflu
 */
/*--------------------------------------------------------------------------*/
/*---------------------------- IMPLEMENTATION ------------------------------*/
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/*------------------------------ INCLUDES ----------------------------------*/
/*--------------------------------------------------------------------------*/

#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <sys/time.h>
#include <math.h>
#include "TestState.h"
#include "TestAlgorithm.h"
#include "MersenneTwister.h"

/*--------------------------------------------------------------------------*/
/*------------------------- NAMESPACE AND USING ----------------------------*/
/*--------------------------------------------------------------------------*/


int main(int argc, const char *argv[]) {

 //   int Number_Routes = 1; // Number of routes
 //   vector<int> N{19}; // Number of Nodes (Origin + Number fuel stations = Destination)

    int N = 102;
    int NR[] = {7, 18};
    double MPG = 28;
    double Speed = 60;

    vector<double> Distance = {0.7, 14.4, 30, 59.3, 277, 136, 0, 363, 76, 33.8, 53.2, 12, 1, 90, 15, 57.5, 8, 147, 3, 32, 38, 1, 253, 140, 0, 15, 52, 215, 36, 35, 40, 115, 53, 100, 0, 40, 134, 4.6, 48, 285, 0, 192, 159, 0, 345, 87, 29.4, 46, 12, 2 , 85.3, 20.9, 51.6, 110, 39.1, 3.6, 31.8, 36.7, 3.8, 220, 0, 8.8, 8.1, 43.7, 59.5, 142, 107, 884, 0, 64, 22.1, 40.8, 376, 31, 46.4, 15.3, 4.1, 83.5, 16.5, 50.4, 109, 39.1, 2.5, 28.2, 32.6, 4.1, 1167, 0, 31, 11, 3.8, 85.3, 20.9, 51.6, 110, 39.4, 5, 32.1, 35.1, 4.1, 442} ;
    vector<double> lambda = { 0, 0.986, 0.912, 0.834, 0.9994, 0.9963, 0, 0, 0.58, 0.9054, 0.794, 0.91, 0.9994, 0.99864, 0.99682, 0.98534, 0.925,  0.916,  0.9914, 0.95, 0.99908, 0.9916, 0.92, 0.9874, 0, 0, 0.698, 0.32, 0.99114, 0.99814, 0.9914, 0.916, 0.925, 0.99354, 0, 0, 0.8996, 0.99864, 0.9994, 0.9054, 0, 0, 0.9866, 0, 0, 0.58, 0.9054, 0.794, 0.91, 0.9994, 0.99864, 0.99682, 0.98534, 0.925, 0.916, 0.9914, 0.95, 0.99908, 0.9916, 0.92 ,0, 0, 0.908, 0.952, 0.8524, 0.973, 0.976, 0.876 ,0 , 0, 0.9964, 0.9848, 0.994, 0.9054, 0.794, 0.91, 0.9994, 0.99864, 0.99682, 0.98534, 0.925, 0.916, 0.9914, 0.95, 0.9908, 0.9916, 0.92, 0 , 0, 0.91, 0.9994, 0.99864, 0.99682, 0.98534, 0.925, 0.916, 0.9914, 0.95, 0.99908, 0.9916, 0.92 , 0} ;
 //   vector<double> Distance = { 0.7, 14.4, 30, 59.3, 277, 136, 0, 363, 76, 33.8, 53.2, 12, 1, 90, 15, 57.5, 8, 147, 3, 32, 38, 1, 253, 140, 0, 15, 52, 215, 36, 35, 40, 115, 53, 100, 0, 40, 134, 4.6, 48, 285, 0, 192, 159, 0, 345, 87, 29.4, 46, 12, 2 , 85.3, 20.9, 51.6, 110, 39.1, 3.6, 31.8, 36.7, 3.8, 220, 0, 8.8, 8.1, 43.7, 59.5, 142, 107, 884, 0, 64, 22.1, 40.8, 376, 31, 46.4, 15.3, 4.1, 83.5, 16.5, 50.4, 109, 39.1, 2.5, 28.2, 32.6, 4.1, 1167, 0, 31, 11, 3.8, 85.3, 20.9, 51.6, 110, 39.4, 5, 32.1, 35.1, 4.1, 442, 0, 33.9, 56.7, 39.1, 3, 30.1, 32.6, 4.1, 153, 0, 21.9, 133, 6.4, 34.8, 32.5, 3.4, 34, 56.9, 65, 50.6, 318, 0, 113, 87.7, 95.2, 20.9, 155, 39.1, 4.1, 29.5, 32.6, 4.1, 121, 16.3} ;
 //   vector<double> lambda = { 0, 0.986, 0.912, 0.834, 0.9994, 0.9963, 0, 0, 0.58, 0.9054, 0.794, 0.91, 0.9994, 0.99864, 0.99682, 0.98534, 0.925,  0.916,  0.9914, 0.95, 0.99908, 0.9916, 0.92, 0.9874, 0, 0, 0.698, 0.32, 0.99114, 0.99814, 0.9914, 0.916, 0.925, 0.99354, 0, 0, 0.8996, 0.99864, 0.9994, 0.9054, 0, 0, 0.9866, 0, 0, 0.58, 0.9054, 0.794, 0.91, 0.9994, 0.99864, 0.99682, 0.98534, 0.925, 0.916, 0.9914, 0.95, 0.99908, 0.9916, 0.92 ,0, 0, 0.908, 0.952, 0.8524, 0.973, 0.976, 0.876 ,0 , 0, 0.9964, 0.9848, 0.994, 0.9054, 0.794, 0.91, 0.9994, 0.99864, 0.99682, 0.98534, 0.925, 0.916, 0.9914, 0.95, 0.9908, 0.9916, 0.92, 0 , 0, 0.91, 0.9994, 0.99864, 0.99682, 0.98534, 0.925, 0.916, 0.9914, 0.95, 0.99908, 0.9916, 0.92 , 0, 0, 0.8524, 0.916, 0.9914, 0.95, 0.99908, 0.9916, 0.92, 0, 0, 0.6, 0.92, 0.9916, 0.99908, 0.9914, 0.95, 0.916, 0.8524, 0.925, 0.99354 , 0,  0, 0.9896, 0.972, 0.99682, 0.98534, 0.916, 0.9914, 0.95, 0.99908, 0.9916, 0.92, 0.998, 0 };

    vector<vector<double>> price = {
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161,  1.161},
            {1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155,  1.155},
            {1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16,   1.16},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974},
            {0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965,  0.965},
            {0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976,  0.976},
            {0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753, 0.9753},
            {0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963,  0.963},
            {0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974,  0.974},
            {1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099,  1.099},
            {1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094,  1.094},
            {1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275,  1.275},
            {1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037,  1.037},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25},
            {1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26},
            {1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03},
            {1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06,  1.06},
            {0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95},
            {1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03},
            {0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98},
            {0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12},
            {1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10},
            {1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10},
            {1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18,   1.18},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23},
            {1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12},
            {1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10},
            {1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10,   1.10},
            {0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95},
            {0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98},
            {1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06},
            {1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05,   1.05},
            {0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96,   0.96},
            {1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06},
            {1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03},
            {1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03,  1.03},
            {1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09,   1.09},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12},
            {1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08},
            {1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12},
            {1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07,   1.07},
            {1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08},
            {1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25,   1.25},
            {1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15},
            {1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15,   1.15},
            {1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23,   1.23},
            {1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26,   1.26},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95},
            {0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97},
            {1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02},
            {1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02,   1.02},
            {0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95},
            {0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97},
            {1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03},
            {1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04,   1.04},
            {1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08,   1.08},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108,  1.108},
            {0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95,   0.95},
            {0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98,   0.98},
            {1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03},
            {1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06,   1.06},
            {0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97,   0.97},
            {1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03},
            {1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03,   1.03},
            {1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106,   1.106},
            {1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12,   1.12},
            {10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000,  10000}
    };
 //   for (int r = 0; r < Number_Routes; r++) {

/*
    vector<double>Distance (N-1, 0.0);
    for (int i =0 ; i< N-1; i++){
        Distance[i] = mtrand1.randInt(200) + 30;
    }
   // Distance[0] = 0;
    Distance[N-2] = 1000;
*/
/*
    vector<double>Distance (N-1, 0.0);
    int size = sizeof(NR)/sizeof(NR[0]);
    for (int i = 0 ; i < size; i++){
        int index = 0;
        for (int j = index; j < NR[i]; j++){
            Distance[j] = mtrand1.randInt(200) + 30;
            cout<< Distance[j]<<endl;
        }
        index ++;
    }

*/
    int FinalDay = 1 + (60 * (accumulate(Distance.begin(), Distance.end(), 0)) / Speed) / 540;

    cout<< FinalDay<<endl;
/*
    vector<vector<double> > price (N, vector<double>(FinalDay, 0.0));

    for (int i =0 ; i< N; i++){
        for (int j =0 ; j < FinalDay; j++) {
            price[i][j] = mtrand1.randInt(5) + 1;
            price[0][j] =  100;
        }
    }


    vector<double> lambda (N , 0.0);

    srand( (unsigned)time( NULL ) );
    for (int i =0 ; i< N; i++){
            lambda[i] = (float) rand()/RAND_MAX;
       // cout<< lambda[i]<<endl;
    }
*/
    vector<Action> allActions =createAllActions();
    vector<State> allStates = createAllStates() ;
   // allStates.push_back(s);


    int iteration;
    iteration = 200000;

    vector< double> Alpha( iteration + 1, 1.0);
    double aCoefficient = 10000;

    for(int k = 1 ; k<= iteration ; k++){

        Alpha[k] = (double) (aCoefficient/(aCoefficient+k));

    }
    Action a;
    a.Refueling = -1;
    vector<vector<vector<double> > > vBar(N, vector<vector<double> >(2, vector<double>(allStates.size(), 10000)));
    vector<vector<vector<double> > > vHat(N, vector<vector<double> >(2, vector<double>(allStates.size(), 10000)));
    vector<vector<Action> > decisionRule(allStates.size(), (vector<Action>(N, a)));
/*
    for (int i = 0 ; i < allStates.size() ; i++)
    {
        for (int h = 0; h< allActions.size() ; h++){

            if (feasibleAction(allStates[i], allActions[h], Distance[0], MPG, Speed) == true) {
                State j = StateTransition(allStates[i], allActions[h], Distance[0], MPG, Speed);
                cout << allStates[i].FuLevel << " " << allActions[h].Refueling << " " << j.FuLevel << " " << endl;
            }

        }
    }
*/

   ReAL(allActions, allStates, Alpha, N, iteration, vBar,vHat, decisionRule,  Distance,   MPG,   Speed, price,  lambda, Alpha);



 //  cout << "Nearest value of x :" << round((400*28)/100.0) << "\n";

 //   cout<<allActions.size()<<" "<<endl;

/*
    for (int i = 0 ; i < allStates.size(); i++){
        cout<<allStates[i].index<<" "<<allStates[i].FuLevel<<" "<<  allStates[i].DriveTime<<" "<< allStates[i].PresentDay <<" " <<endl;
    }*/
/*
State testS ;
testS.FuLevel = 387;
testS.PresentDay = 4;
testS.DriveTime = 345;

State test = StateTransition( testS, allActions[0], 1000.0,  MPG,  Speed);
cout<<testS.DriveTime<<" "<<testS.PresentDay<<" "<<testS.FuLevel<<" "<<endl;
cout<<test.DriveTime<<" "<<test.PresentDay<<" "<<test.FuLevel<<" "<<endl;
*/
    return 0;
}
